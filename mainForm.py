#!/usr/bin/env python
# -*- coding: UTF8 -*-
#
# generated by wxGlade 0.6.8 on Sun Aug 03 17:47:27 2014
#

import wx
import gettext
import os
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
# menubar #
ID_open_vector = 1001
ID_open_raster = 1002
ID_open_static = 1003
ID_link_DB =  1004
ID_save_DB = 1005
ID_choose_module = 1006 
ID_set_module = 1007

# toolbar #
ID_TOOL_OPEN_VECTOR = 2001
ID_TOOL_OPEN_RASTER = 2002
ID_TOOL_OPEN_static = 2003
ID_TOOL_OPEN_DB = 2004
ID_TOOL_CHOOSE_MODULE = 2005

import data
import IndexForm
import OpenFile
import choose_module
import openStaticFile
import OpenVectorFile
import db_view
import logging

import wx_matplot_panel
import GridSimple
import read_excel

import shp2mongoDB

import show_shapefile
import highlight_XML

import txt_frame  # 显示tiff 图片
import show_bar  # population ascend

class MainForm(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainForm.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_5 = wx.Notebook(self, wx.ID_ANY, style=wx.NB_BOTTOM)
        self.list_tree_ctrl = wx.TreeCtrl(self.notebook_5, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.explorer_tree_ctrl = wx.GenericDirCtrl(self.notebook_5, -1, size=(200,225), style=wx.DIRCTRL_SHOW_FILTERS,
                                filter="All files (*.*)|*.*|Python files (*.py)|*.py|Shape files (*.shp)|*.shp|Excel files (*.xls)|*.xls|Raster files (*.tif)|*.tif")
        self.notebook_6 = wx.Notebook(self, wx.ID_ANY, style=wx.NB_BOTTOM)
        self.notebook_6_pane_1 = wx.Panel(self.notebook_6, wx.ID_ANY)

	self.log = logging.getLogger(r"C:\Users\Administrator\Desktop\log.log") 
	self.treeCtrl(self.list_tree_ctrl)	
	self.toolbar()
	self.menuBar()
	
	self.explorer_tree_ctrl.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.OnBeginDrag)	
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
	
    #-------------------tree ctrl 2 -----------
    def treeCtrl(self , tree):
        #self.tree = wx.TreeCtrl(parent)
        # Add a root node
        root = tree.AddRoot(u"数据集")
        # Add nodes from our data set 
	
	self.classify = self.list_tree_ctrl.AppendItem(root, u"数据类型分类")
	self.list_tree_ctrl.SetPyData(self.classify, None)	
	
	self.tree_vector = self.list_tree_ctrl.AppendItem(self.classify, u"矢量数据")
	self.tree_raster = self.list_tree_ctrl.AppendItem(self.classify, u"栅格数据")
	self.tree_static = self.list_tree_ctrl.AppendItem(self.classify, u"统计数据")	
	
	self.list_tree_ctrl.SetPyData(self.tree_vector, None)
	self.list_tree_ctrl.SetPyData(self.tree_raster, None)
	self.list_tree_ctrl.SetPyData(self.tree_static, None)
	
	self.AddTreeNodes(root, data.classify , tree)
	
        # Expand the first level
        tree.Expand(root) 
	
    def AddTreeNodes(self, parentItem, items , tree):
        """
        Recursively traverses the data structure, adding tree nodes to
        match it.
        """
        for item in items:
            print item , type(item)
            if type(item) == str:
                tree.AppendItem(parentItem, item)
            elif type(item) == unicode:
                tree.AppendItem(parentItem , item)
            else:
                newItem = tree.AppendItem(parentItem, item[0])
                self.AddTreeNodes(newItem, item[1], tree)
		
    def menuBar(self):
	menuBar=wx.MenuBar()
	self.file = wx.Menu()
	self.open_vector = wx.MenuItem(self.file, ID_open_vector, _(u"\u77e2\u91cf\u6587\u4ef6"), "", wx.ITEM_NORMAL)
	self.file.AppendItem(self.open_vector)
	self.oprn_raster = wx.MenuItem(self.file, ID_open_raster, _(u"\u6805\u683c\u6587\u4ef6"), "", wx.ITEM_NORMAL)
	self.file.AppendItem(self.oprn_raster)
	self.open_static = wx.MenuItem(self.file, ID_open_static, _(u"\u7edf\u8ba1\u6587\u4ef6"), "", wx.ITEM_NORMAL)
	self.file.AppendItem(self.open_static)
	menuBar.Append(self.file, _(u"\u6587\u4ef6"))
	self.DB = wx.Menu()
	self.link_DB = wx.MenuItem(self.DB, ID_link_DB, _(u"\u8fde\u63a5\u6570\u636e\u5e93"), "", wx.ITEM_NORMAL)
	self.DB.AppendItem(self.link_DB)
	self.save_DB = wx.MenuItem(self.DB, ID_save_DB, _(u"\u4fdd\u5b58\u5230\u6570\u636e\u5e93"), "", wx.ITEM_NORMAL)
	self.DB.AppendItem(self.save_DB)
	menuBar.Append(self.DB, _(u"\u6570\u636e\u5e93"))
	self.module = wx.Menu()
	self.choose_module = wx.MenuItem(self.module, ID_choose_module, _(u"\u9009\u62e9\u6a21\u578b"), "", wx.ITEM_NORMAL)
	self.module.AppendItem(self.choose_module)
	self.set_module = wx.MenuItem(self.module, ID_set_module, _(u"\u81ea\u5b9a\u4e49\u6a21\u578b"), "", wx.ITEM_NORMAL)
	self.module.AppendItem(self.set_module)
	menuBar.Append(self.module, _(u"\u6a21\u578b"))	
	
	
        self.Bind(wx.EVT_MENU, self.open_vector_event, id=ID_open_vector)
        self.Bind(wx.EVT_MENU, self.open_raster_event, id=ID_open_raster)
        self.Bind(wx.EVT_MENU, self.open_static_event, id=ID_open_static)
        self.Bind(wx.EVT_MENU, self.link_DB_event, id=ID_link_DB)
        self.Bind(wx.EVT_MENU, self.save_DB_event, id=ID_save_DB)
        self.Bind(wx.EVT_MENU, self.choose_module_event, id=ID_choose_module)
        self.Bind(wx.EVT_MENU, self.set_module_event, id=ID_set_module)	
	self.SetMenuBar(menuBar)
	
    def toolbar(self):
	toolBar = self.CreateToolBar()
        toolBar.AddLabelTool(ID_TOOL_OPEN_VECTOR, _("openVector"), wx.Bitmap("E:\\evaluate_soft\\ICON\\folder_vector.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        toolBar.AddLabelTool(ID_TOOL_OPEN_RASTER, _("openRaster"), wx.Bitmap("E:\\evaluate_soft\\ICON\\raster.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        toolBar.AddLabelTool(ID_TOOL_OPEN_static, _("openStatic"), wx.Bitmap("E:\\evaluate_soft\\ICON\\static.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        toolBar.AddSeparator()
        toolBar.AddLabelTool(ID_TOOL_OPEN_DB, _("openDB"), wx.Bitmap("E:\\evaluate_soft\\ICON\\Database.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        toolBar.AddLabelTool(ID_TOOL_CHOOSE_MODULE, _("openModule"), wx.Bitmap("E:\\evaluate_soft\\ICON\\choose_module.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
	toolBar.Realize()

        self.Bind(wx.EVT_TOOL, self.open_vector_event, id=ID_TOOL_OPEN_VECTOR)
        self.Bind(wx.EVT_TOOL, self.open_raster_event, id=ID_TOOL_OPEN_RASTER)
        self.Bind(wx.EVT_TOOL, self.open_static_event, id=ID_TOOL_OPEN_static)
        self.Bind(wx.EVT_TOOL, self.open_DB_event, id=ID_TOOL_OPEN_DB)
        self.Bind(wx.EVT_TOOL, self.open_module_event, id=ID_TOOL_CHOOSE_MODULE)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainForm.__set_properties
        self.SetTitle(u" 滩涂健康评价软件")
        self.SetSize((1078, 653))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainForm.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        self.notebook_5.AddPage(self.list_tree_ctrl, _("List"))
        self.notebook_5.AddPage(self.explorer_tree_ctrl, _("Explorer"))
        sizer_1.Add(self.notebook_5, 1, wx.EXPAND, 0)
        self.notebook_6.AddPage(self.notebook_6_pane_1, _("tab1"))
        sizer_1.Add(self.notebook_6, 3, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
	
##########################################################################

    def link_DB_event(self, event):  # wxGlade: MainFormMenu.<event_handler>
        print "Event handler 'link_DB_event' not implemented!"
        event.Skip()

    def save_DB_event(self, event):  # wxGlade: MainFormMenu.<event_handler>
        print "Event handler 'save_DB_event' not implemented!"
        event.Skip()

    def choose_module_event(self, event):  # wxGlade: MainFormMenu.<event_handler>
	choose = choose_module.MyFrame1(None)
	choose.Show()
        print "Event handler 'choose_module_event' not implemented!"
        event.Skip()

    def set_module_event(self, event):  # wxGlade: MainFormMenu.<event_handler>
	set_module = IndexForm.MyFrame1(None)
	set_module.Show()
        print "Event handler 'set_module' not implemented!"
        event.Skip()


##########################################################################
    
    def open_vector_event(self, event):  # wxGlade: MainFormToolBar.<event_handler>
	rasterFile = OpenFile.MyFrame1(None)
	rasterFile.Show()
	
	print"openFile"
        print "Event handler 'open_vector_event' not implemented!"
        event.Skip()

    def open_raster_event(self, event):  # wxGlade: MainFormToolBar.<event_handler>
        print "Event handler 'open_raster_event' not implemented!"
        event.Skip()

    def open_static_event(self, event):  # wxGlade: MainFormToolBar.<event_handler>
        print "Event handler 'open_static_event' not implemented!"
        event.Skip()

    def open_DB_event(self, event):  # wxGlade: MainFormToolBar.<event_handler>
        print "Event handler 'open_DB_event' not implemented!"
        event.Skip()

    def open_module_event(self, event):  # wxGlade: MainFormToolBar.<event_handler>
        print "Event handler 'open_module_event' not implemented!"
        event.Skip()
	
    def OnBeginDrag(self,event):
	"""拖拽treectrl事件"""
	item = event.GetItem()
	self.path2 =  self.explorer_tree_ctrl.GetPath()
	#获取扩展名
	fileName = os.path.basename(self.path2)
	extent_name = self.path2.split('.')[-1]
	file_name = fileName.split(".")[0]
	
	if ("shp" == extent_name) or ("SHP" == extent_name) or ("Shp" == extent_name):	
	    
	    read_shp = shp2mongoDB.shp2mongodb(self.path2)
	    ds = read_shp.getDS()
	    
	    attri_data = read_shp.getAttributeData(ds)	    
	    attri_frame = GridSimple.SimpleGrid(self.notebook_6, self.log)
	    attri_frame.make_cell(attri_data)
	    self.notebook_6.AddPage(attri_frame , u"属性表")
	    
	    #geomType = self.page_Spatial.getShpType(self.path2)
	    #print geomType
	    self.newPage = show_shapefile.sketchWindow(self.notebook_6, wx.ID_ANY)    #wx_matplot_panel.wx_matplot_panel(self.nb)
	    self.notebook_6.AddPage(self.newPage,file_name)
	    self.newPage.addLayer(self.path2, wx.Pen("black",2,wx.SOLID),wx.Brush('blue', wx.TRANSPARENT))
	    
	    #child = self.tree_ctrl_1.AppendItem(self.tree_vector, file_name)
	    #self.tree_ctrl_1.SetPyData(child, None)


# end of class MainFormToolBar
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MainForm(None, wx.ID_ANY, "")
    
	
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()